To create a chat application in C# that interacts with multiple bots using the Microsoft Bot Framework SDK without relying on Azure services, you can follow these steps. This solution includes both the backend server for routing messages to different bots and the frontend chat interface.

### Step 1: Set Up the Bot Projects

1. **Create Bot Projects**:
   Create separate bot projects using the Bot Framework SDK.

   ```sh
   dotnet new webapi -o EchoBot
   cd EchoBot
   dotnet add package Microsoft.Bot.Builder.Integration.AspNet.Core
   dotnet add package Microsoft.Bot.Builder
   ```

2. **Modify the Bot Code**:
   Customize the bot logic in `Bots\EchoBot.cs` or create new bots as needed.

   ```csharp
   using Microsoft.Bot.Builder;
   using Microsoft.Bot.Builder.Integration.AspNet.Core;
   using Microsoft.Bot.Schema;
   using System.Threading;
   using System.Threading.Tasks;

   public class EchoBot : ActivityHandler
   {
       protected override async Task OnMessageActivityAsync(ITurnContext<IMessageActivity> turnContext, CancellationToken cancellationToken)
       {
           var replyText = $"Echo: {turnContext.Activity.Text}";
           await turnContext.SendActivityAsync(MessageFactory.Text(replyText, replyText), cancellationToken);
       }
   }
   ```

### Step 2: Create the Backend Server

1. **Create a New ASP.NET Core Project**:

   ```sh
   dotnet new webapi -o ChatBackend
   cd ChatBackend
   dotnet add package Microsoft.Bot.Builder.Integration.AspNet.Core
   dotnet add package Microsoft.Bot.Builder
   ```

2. **Setup the ASP.NET Core Server**:
   Modify `Startup.cs` to configure the Bot Framework and add routes for different bots.

   ```csharp
   using Microsoft.AspNetCore.Builder;
   using Microsoft.AspNetCore.Hosting;
   using Microsoft.Bot.Builder;
   using Microsoft.Bot.Builder.Integration.AspNet.Core;
   using Microsoft.Extensions.Configuration;
   using Microsoft.Extensions.DependencyInjection;
   using Microsoft.Extensions.Hosting;

   public class Startup
   {
       public Startup(IConfiguration configuration)
       {
           Configuration = configuration;
       }

       public IConfiguration Configuration { get; }

       public void ConfigureServices(IServiceCollection services)
       {
           services.AddControllers();
           services.AddSingleton<IBotFrameworkHttpAdapter, AdapterWithErrorHandler>();
           services.AddTransient<EchoBot>();
           services.AddTransient<AnotherBot>();
       }

       public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
       {
           if (env.IsDevelopment())
           {
               app.UseDeveloperExceptionPage();
           }

           app.UseRouting();
           app.UseEndpoints(endpoints =>
           {
               endpoints.MapControllers();
           });
       }
   }

   public class AdapterWithErrorHandler : BotFrameworkHttpAdapter
   {
       public AdapterWithErrorHandler()
           : base()
       {
           OnTurnError = async (context, exception) =>
           {
               await context.SendActivityAsync("Sorry, it looks like something went wrong.");
           };
       }
   }
   ```

3. **Create Controllers**:
   Create controllers to handle requests and route them to different bots.

   ```csharp
   using Microsoft.AspNetCore.Mvc;
   using Microsoft.Bot.Builder;
   using Microsoft.Bot.Builder.Integration.AspNet.Core;
   using Microsoft.Bot.Schema;
   using System.Threading.Tasks;

   [ApiController]
   [Route("api/messages")]
   public class BotController : ControllerBase
   {
       private readonly IBotFrameworkHttpAdapter _adapter;
       private readonly EchoBot _echoBot;
       private readonly AnotherBot _anotherBot;

       public BotController(IBotFrameworkHttpAdapter adapter, EchoBot echoBot, AnotherBot anotherBot)
       {
           _adapter = adapter;
           _echoBot = echoBot;
           _anotherBot = anotherBot;
       }

       [HttpPost]
       public async Task PostAsync()
       {
           await _adapter.ProcessAsync(Request, Response, _echoBot); // Default to EchoBot
       }

       [HttpPost("another")]
       public async Task PostAnotherAsync()
       {
           await _adapter.ProcessAsync(Request, Response, _anotherBot);
       }
   }
   ```

4. **Define Bots**:
   Create separate bot logic files for each bot, e.g., `EchoBot.cs` and `AnotherBot.cs`.

   ```csharp
   // EchoBot.cs
   using Microsoft.Bot.Builder;
   using Microsoft.Bot.Schema;
   using System.Threading;
   using System.Threading.Tasks;

   public class EchoBot : ActivityHandler
   {
       protected override async Task OnMessageActivityAsync(ITurnContext<IMessageActivity> turnContext, CancellationToken cancellationToken)
       {
           var replyText = $"Echo: {turnContext.Activity.Text}";
           await turnContext.SendActivityAsync(MessageFactory.Text(replyText, replyText), cancellationToken);
       }
   }

   // AnotherBot.cs
   using Microsoft.Bot.Builder;
   using Microsoft.Bot.Schema;
   using System.Threading;
   using System.Threading.Tasks;

   public class AnotherBot : ActivityHandler
   {
       protected override async Task OnMessageActivityAsync(ITurnContext<IMessageActivity> turnContext, CancellationToken cancellationToken)
       {
           var replyText = $"AnotherBot: {turnContext.Activity.Text}";
           await turnContext.SendActivityAsync(MessageFactory.Text(replyText, replyText), cancellationToken);
       }
   }
   ```

### Step 3: Create the Frontend Chat Application

1. **Create a New ASP.NET Core MVC Project**:

   ```sh
   dotnet new mvc -o ChatFrontend
   cd ChatFrontend
   dotnet add package Microsoft.Bot.Builder
   dotnet add package Microsoft.Bot.Builder.Integration.AspNet.Core
   ```

2. **Add the Bot Framework Web Chat**:
   Download the Bot Framework Web Chat scripts and add them to your project.

   ```html
   <!-- Add this to your Views/Home/Index.cshtml -->
   <!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <title>Chat App</title>
       <script src="https://cdn.botframework.com/botframework-webchat/latest/webchat.js"></script>
   </head>
   <body>
       <div id="webchat" role="main"></div>
       <script>
           const botConnection = window.WebChat.createDirectLine({
               token: 'YOUR_DIRECT_LINE_TOKEN'
           });
           window.WebChat.renderWebChat({
               directLine: botConnection,
               userID: 'YOUR_USER_ID',
               username: 'YOUR_USER_NAME'
           }, document.getElementById('webchat'));
       </script>
   </body>
   </html>
   ```

3. **Modify the Frontend Code**:
   Create a controller to serve the frontend and provide a token endpoint if needed.

   ```csharp
   using Microsoft.AspNetCore.Mvc;

   public class HomeController : Controller
   {
       public IActionResult Index()
       {
           return View();
       }
   }
   ```

   ```csharp
   using Microsoft.AspNetCore.Mvc;

   [ApiController]
   [Route("api/token")]
   public class TokenController : ControllerBase
   {
       [HttpGet]
       public IActionResult GetToken()
       {
           // Generate a token for Direct Line connection here
           var token = "YOUR_GENERATED_TOKEN";
           return Ok(new { token });
       }
   }
   ```

### Step 4: Run the Application

1. **Run the Backend Server**:

   ```sh
   dotnet run --project ChatBackend
   ```

2. **Run the Frontend Application**:

   ```sh
   dotnet run --project ChatFrontend
   ```

### Explanation

1. **Bot Projects**: Create individual bot projects using the Bot Framework SDK and define the bot logic.
2. **Backend Server**: Use ASP.NET Core to create a server that routes messages to different bots based on the endpoint.
3. **Frontend Application**: Use ASP.NET Core MVC to create a web interface that interacts with the bots via the Bot Framework Web Chat.
4. **Running the Application**: Start both the backend server and the frontend application to enable chat functionality.

This setup allows you to interact with multiple bots without using Azure services. The frontend application interacts with the backend server, which routes messages to the appropriate bot based on the requested endpoint.